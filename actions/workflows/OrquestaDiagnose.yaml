version: 1.0

description: Workflow for Diagnose Module with Orquesta Format

input:
  - diagnosedata
  - kafka_receive_valid: "Kafka_Receive_Diagnosis"
  - workflow: "DiagnoseFlow"
  - NeiborDown: "Run NeighborDown Validation"
  - EquipmentFan: "Run EquipmentFan Validation"
  - EqipmentPhysical: "Run EquipmentPhysicalPort Validation"
  - BGPRouter: "Run BGPRouterDown Validation"
  - TimingReference: "Run TimingReference Validation"
  - TDMEquipment: "Run TDMEquipmentDown validation"
  - DryAlarm: "Run DryContactAlarm Validation"
  - LSPAlarm: "Run PathAlarmsLSP Validation"
  - PowerSupply: "Run PowerSupply Validation"
  - Linkdown: "Run TransportLinkDownAlarm Validation"
  - ps: "Power_Supply_1"
tasks:
  read_kafka_data:
    action: core.echo message=<% ctx(diagnosedata) %>
    next:
      - when: <% succeeded() %>
        publish:
          - kafkadata: <% result().stdout %>
        do: replace_chars
  replace_chars:
    action: core.echo message="Replacing unkown charcters with space"
    next:
      - when: <% succeeded() %>
        publish:
          - replacechar: "{{ ctx(\"kafkadata\")|replace(\" u'\", \"'\") }}"
        do: fetch_nodes
  fetch_nodes:
    action: core.echo message="Fetching node Items from the Kafka Data"
    next:
      - when: <% succeeded() %>
        publish:
          - nodeop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'Node'\" %}{% set node = value.split(':')[1] %}{{node}}{% endif %}{% endfor %}"
          - smop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'Summary'\" %}{% set summary = value.split(':')[1]%}{{summary}}{% endif %}{% endfor %}"
          - ssop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'ServerSerial'\" %}{% set serverserials = value.split(':')[1] %}{{serverserials}}{% endif %}{% endfor %}"
          - fsop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'FirstOccurrence'\" %}{% set first_occurs = (value.split(':')[1] ~ \":\" ~ value.split(':')[2] ~ \":\" ~ value.split(':')[3]) %}{{first_occurs}}{% endif %}{% endfor %}"
          - lsop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'LastOccurrence'\" %}{% set last_occurs = (value.split(':')[1] ~ \":\" ~ value.split(':')[2] ~ \":\" ~ value.split(':')[3]) %}{{last_occurs}}{% endif %}{% endfor %}"
          - snop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'ServerName'\" %}{% set servernames = value.split(':')[1] %}{{servernames}}{% endif %}{% endfor %}"
          - agop: "{%set data = ctx(\"replacechar\") %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'AlertGroup'\" %}{% set alertgrps = value.split(':')[1] %}{{alertgrps}}{% endif %}{% endfor %}"
        do: replace_UnChars
  replace_UnChars:
    action: core.echo message="Replacing final unknown characters with space"
    next:
      - when: <% succeeded() %>
        publish:
          - nodes: "{{ ctx(\"nodeop\") | replace(\"'\", \"\") }}"
          - summary: "{{ ctx(\"smop\") | replace(\"'\", \"\") }}"
          - serverserial: "{{ ctx(\"ssop\") | replace(\"'\", \"\") }}"
          - firstoccurrence: "{{ ctx(\"fsop\") | replace(\"'\", \"\") }}"
          - lastoccurrence: "{{ ctx(\"lsop\") | replace(\"'\", \"\") }}"
          - servername: "{{ ctx(\"snop\") | replace(\"'\", \"\") }}"
          - alertgroup: "{{ ctx(\"agop\") | replace(\"'\", \"\") }}"
        do: VerifyEvents
  VerifyEvents:
    action: core.echo message="Verifying the incoming kafka events"
    next:
      - when: <% succeeded() %>
        publish:
          - customtext: "{% if 'NeighborDown' in ctx(\"summary\") %}{{ctx(\"NeiborDown\")}}{% elif 'ChannelGrop' in ctx(\"summary\") %}{{ctx(\"TDMEquipment\")}}{% elif 'Rack' in ctx(\"summary\") %}{{ctx(\"EquipmentFan\")}}{% elif (('PhysicalPort' in ctx(\"summary\")) and ('equipmentAlarm' in ctx(\"alertgroup\")))%}{{ctx(\"EqipmentPhysical\")}}{% elif 'BGP' in ctx(\"summary\") %}{{ctx(\"BGPRouter\")}}{% elif 'TimingReference' in ctx(\"summary\") %}{{ctx(\"TimingReference\")}}{% elif 'Commercial' in ctx(\"summary\") %}{{ctx(\"DryAlarm\")}}{% elif 'LspDown' in ctx(\"summary\") %}{{ctx(\"LSPAlarm\")}}{% elif 'Power' in ctx(\"summary\") %}{{ctx(\"PowerSupply\")}}{% elif (('PhysicalPort' in ctx(\"summary\")) and ('LinkDown' in ctx(\"alertgroup\"))) %}{{ctx(\"Linkdown\")}}{% endif %}"
        do: kafka_write
  kafka_write:
    action: kafka.produce topic="netcoolwrt2" message='{"nodes":"<%ctx("nodes")%>", "summary":"<%ctx("summary")%>", "firstoccurrence":"<%ctx("firstoccurrence")%>", "lastoccurrence":"<%ctx("lastoccurrence")%>", "serverserial":"<%ctx("serverserial")%>", "servername":"<%ctx("servername")%>", "ImpactHandlingStatus":"<%ctx("kafka_receive_valid")%>", "customtext":"<%ctx("customtext")%>", "workflow":"<%ctx("workflow")%>"}'
output:
  - kafkadata: <% ctx(replacechar) %>
  - summaryk: <% ctx(smop) %>
  - serverserial: <% ctx(ssop) %>
  - foccur: <% ctx(fsop) %>
  - loccur: <% ctx(lsop) %>
  - sname: <% ctx(snop) %>
  - alertg: <% ctx(agop) %>
  - nodeval: <% ctx(nodes) %>
  - nodes: <% ctx(nodes)%>
  - summary: <% ctx(summary)%>
  - serverserial: <% ctx(serverserial)%>
  - firstoccurrence: <% ctx(firstoccurrence)%>
  - lastoccurrence: <% ctx(lastoccurrence)%>
  - servername: <% ctx(servername)%>
  - alertgroup: <% ctx(alertgroup)%>
  - customtext: <% ctx(customtext)%>
